// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ActionInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dataReceivers", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActionInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ActionInfo entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ActionInfo", id.toString(), this);
    }
  }

  static load(id: string): ActionInfo | null {
    return changetype<ActionInfo | null>(store.get("ActionInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dataReceivers(): Array<string> {
    let value = this.get("dataReceivers");
    return value!.toStringArray();
  }

  set dataReceivers(value: Array<string>) {
    this.set("dataReceivers", Value.fromStringArray(value));
  }
}

export class DataReceiver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dataId", Value.fromBytes(Bytes.empty()));
    this.set("receiverId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DataReceiver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DataReceiver entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DataReceiver", id.toString(), this);
    }
  }

  static load(id: string): DataReceiver | null {
    return changetype<DataReceiver | null>(store.get("DataReceiver", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dataId(): Bytes {
    let value = this.get("dataId");
    return value!.toBytes();
  }

  set dataId(value: Bytes) {
    this.set("dataId", Value.fromBytes(value));
  }

  get receiverId(): string {
    let value = this.get("receiverId");
    return value!.toString();
  }

  set receiverId(value: string) {
    this.set("receiverId", Value.fromString(value));
  }
}
